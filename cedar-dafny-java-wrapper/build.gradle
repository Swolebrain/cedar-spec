/*
 Applies core Gradle plugins, which are ones built into Gradle itself.
*/
plugins {
  // Java for compile and unit test of Java source files. Read more at:
  // https://docs.gradle.org/current/userguide/java_plugin.html
  id 'java'

  // necessary to run the main() of the jar?
  id 'application'

  // JaCoCo for coverage metrics and reports of Java source files. Read more at:
  // https://docs.gradle.org/current/userguide/jacoco_plugin.html
  id 'jacoco'
}

/*
 Applies community Gradle plugins, usually added as build-tools in Config.
*/

// SpotBugs for quality checks and reports of source files. Read more at:
// https://spotbugs.readthedocs.io/en/stable/gradle.html
//apply plugin: 'com.github.spotbugs'

/*
 Java plugin default project layout is 'src/main/java' and 'src/test/java'.
 Uncomment below if you instead want to use 'src' and 'tst'.

sourceSets.main.java.srcDirs = ['src']
sourceSets.test.java.srcDirs = ['tst']
*/

mainClassName = 'com.cedar_definitional_engine.Main'
jar {
  manifest {
    attributes(
      /*'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),*/
      'Main-Class': 'com.cedar_definitional_engine.Main'
    )
  }
}

/*
 Configures the Checkstyle "checkstyle" plugin. Remove this and the plugin if
 you want to skip these checks and report generation.
check.dependsOn verify
formatter {
  formatterStyle = "AOSP"
  includeTests = true
}
*/

/*
 Configures the JaCoCo "jacoco" plugin. Remove this if you want to skip
 these checks and report generation.

 Set minimum code coverage to fail build, where 0.01 = 1%.
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        minimum = 0.01
      }
    }
  }
}
*/

/*
 Configures the SpotBugs "com.github.spotbugs" plugin. Remove this and the
 plugin to skip these checks and report generation.
spotbugs {
  ignoreFailures.set(false)
}
*/
/*
  The SpotBugs Gradle Plugin generates a task for each sourceSet generated by
  Gradle Java Plugin. For instance, if you have two sourceSets main and test,
  this plugin will generates two tasks: spotbugsMain and spotbugsTest.
  Uncomment below if you want to skip checks for test code.

spotbugsTest {
  ignoreFailures = true
}
*/

repositories {
  mavenCentral()
}

/*
 Resolve build, test, tool, and runtime dependencies.
*/
dependencies {
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.7.1'
  implementation files(
    '../cedar-dafny/build/lib/CedarDafny-difftest.jar',
    '../cedar-dafny/build/lib/DafnyRuntime.jar'
  )
  // https://junit.org/junit5/docs/current/user-guide/#dependency-metadata-junit-jupiter: OK?
  testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

/*
 Specifies that JUnit Platform (a.k.a. JUnit 5) should be used to execute tests.

 For mixed JUnit 4 and 5 tests, add 'JUnit-4-12-migration = 5.x;' to
 test-dependencies in Config.
*/
test {
  useJUnitPlatform()
}

tasks.register('dumpClasspath') {
  doLast {
    buildDir.mkdirs()
    new File(buildDir, "runtimeClasspath.txt").text = configurations.runtimeClasspath.asPath
  }
}
